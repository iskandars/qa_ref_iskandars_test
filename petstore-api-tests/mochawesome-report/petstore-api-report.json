{
  "stats": {
    "suites": 3,
    "tests": 17,
    "passes": 15,
    "pending": 0,
    "failures": 2,
    "start": "2025-07-03T00:12:50.279Z",
    "end": "2025-07-03T00:13:14.124Z",
    "duration": 23845,
    "testsRegistered": 17,
    "passPercent": 88.23529411764706,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "69c83e0e-f3e8-4393-823a-d93402617479",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b47e43f8-ebd6-4f44-ad92-175886d856c9",
          "title": "Pet API Tests",
          "fullFile": "/Users/iskandars/Downloads/2025_indico/petstore-api-tests/test/pet.test.js",
          "file": "/test/pet.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add a new pet and verify the response (POST /pet)",
              "fullTitle": "Pet API Tests should add a new pet and verify the response (POST /pet)",
              "timedOut": false,
              "duration": 1240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newPet = {\n  id: 10001,\n  category: {\n    id: 1,\n    name: 'Dogs'\n  },\n  name: 'DoggieTest',\n  photoUrls: [\n    'string'\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'test-tag'\n    }\n  ],\n  status: 'available'\n};\nconst res = await chai.request(BASE_URL)\n  .post('/pet')\n  .send(newPet);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('id', newPet.id);\nexpect(res.body).to.have.property('name', newPet.name);\nexpect(res.body).to.have.property('status', newPet.status);\nexpect(res.body.category).to.have.property('name', newPet.category.name);\ncreatedPetId = res.body.id; // Store the ID for future tests",
              "err": {},
              "uuid": "612a904a-ba4a-4612-b47b-e9c4accb5d3f",
              "parentUUID": "b47e43f8-ebd6-4f44-ad92-175886d856c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find pets by status \"available\" and verify all pets have correct status (GET /pet/findByStatus)",
              "fullTitle": "Pet API Tests should find pets by status \"available\" and verify all pets have correct status (GET /pet/findByStatus)",
              "timedOut": false,
              "duration": 1185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const status = 'available';\nconst res = await chai.request(BASE_URL)\n  .get(`/pet/findByStatus?status=${status}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body).to.not.be.empty;\n// Verify that all pets in the response have the status \"available\"\nres.body.forEach(pet => {\n  expect(pet).to.have.property('status', status);\n});",
              "err": {},
              "uuid": "ada8ff3f-7aa9-4ecf-a28a-94e94e4b1285",
              "parentUUID": "b47e43f8-ebd6-4f44-ad92-175886d856c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find pets by status \"pending\" and verify all pets have correct status (GET /pet/findByStatus)",
              "fullTitle": "Pet API Tests should find pets by status \"pending\" and verify all pets have correct status (GET /pet/findByStatus)",
              "timedOut": false,
              "duration": 1531,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const status = 'pending';\nconst res = await chai.request(BASE_URL)\n  .get(`/pet/findByStatus?status=${status}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array');\n// Note: It's possible for there to be no pending pets at a given time,\n// so we don't assert that it's not empty, just that the statuses are correct if present.\n// Verify that all pets in the response have the status \"pending\"\nres.body.forEach(pet => {\n  expect(pet).to.have.property('status', status);\n});",
              "err": {},
              "uuid": "4c3914ca-cc89-4f8b-8818-4bc76f7ee3be",
              "parentUUID": "b47e43f8-ebd6-4f44-ad92-175886d856c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update an existing pet (PUT /pet)",
              "fullTitle": "Pet API Tests should update an existing pet (PUT /pet)",
              "timedOut": false,
              "duration": 1327,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!createdPetId) {\n  // Skip if previous test failed to create a pet\n  console.warn('Skipping update pet test as no pet was created.');\n  return;\n}\nconst updatedPet = {\n  id: createdPetId,\n  category: {\n    id: 1,\n    name: 'UpdatedDogs'\n  },\n  name: 'DoggieUpdated',\n  photoUrls: [\n    'string'\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'updated-tag'\n    }\n  ],\n  status: 'sold'\n};\nconst res = await chai.request(BASE_URL)\n  .put('/pet')\n  .send(updatedPet);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('id', updatedPet.id);\nexpect(res.body).to.have.property('name', updatedPet.name);\nexpect(res.body).to.have.property('status', updatedPet.status);",
              "err": {},
              "uuid": "c65bce57-be01-483d-86eb-cb9168c6a0f3",
              "parentUUID": "b47e43f8-ebd6-4f44-ad92-175886d856c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find pet by ID (GET /pet/{petId})",
              "fullTitle": "Pet API Tests should find pet by ID (GET /pet/{petId})",
              "timedOut": false,
              "duration": 999,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!createdPetId) {\n  console.warn('Skipping find pet by ID test as no pet was created.');\n  return;\n}\nconst res = await chai.request(BASE_URL)\n  .get(`/pet/${createdPetId}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('id', createdPetId);\nexpect(res.body).to.have.property('name', 'DoggieUpdated'); // Assuming it was updated\nexpect(res.body).to.have.property('status', 'sold');",
              "err": {},
              "uuid": "bd316916-d5b3-4a58-baa5-1cc91cc6bd54",
              "parentUUID": "b47e43f8-ebd6-4f44-ad92-175886d856c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a pet (DELETE /pet/{petId})",
              "fullTitle": "Pet API Tests should delete a pet (DELETE /pet/{petId})",
              "timedOut": false,
              "duration": 2479,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!createdPetId) {\n  console.warn('Skipping delete pet test as no pet was created.');\n  return;\n}\nconst res = await chai.request(BASE_URL)\n  .delete(`/pet/${createdPetId}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property('message', `${createdPetId}`);\n// Verify the pet is no longer found\nconst getRes = await chai.request(BASE_URL)\n  .get(`/pet/${createdPetId}`)\n  .catch(err => err.response); // Catch the error response\nexpect(getRes).to.have.status(404); // Expecting 404 Not Found",
              "err": {},
              "uuid": "c5880082-1da9-4662-bf82-978b8e45f201",
              "parentUUID": "b47e43f8-ebd6-4f44-ad92-175886d856c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "612a904a-ba4a-4612-b47b-e9c4accb5d3f",
            "ada8ff3f-7aa9-4ecf-a28a-94e94e4b1285",
            "4c3914ca-cc89-4f8b-8818-4bc76f7ee3be",
            "c65bce57-be01-483d-86eb-cb9168c6a0f3",
            "bd316916-d5b3-4a58-baa5-1cc91cc6bd54",
            "c5880082-1da9-4662-bf82-978b8e45f201"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8761,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "f8b52e9b-8be7-4c98-ba7b-3a48dc8fec3d",
          "title": "Store API Tests",
          "fullFile": "/Users/iskandars/Downloads/2025_indico/petstore-api-tests/test/store.test.js",
          "file": "/test/store.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return pet inventories by status (GET /store/inventory)",
              "fullTitle": "Store API Tests should return pet inventories by status (GET /store/inventory)",
              "timedOut": false,
              "duration": 1354,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await chai.request(BASE_URL)\n  .get('/store/inventory');\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('object');\n// Expecting properties like 'available', 'pending', 'sold' etc.\nexpect(res.body).to.have.property('available').that.is.a('number');\nexpect(res.body).to.have.property('pending').that.is.a('number');\nexpect(res.body).to.have.property('sold').that.is.a('number');",
              "err": {},
              "uuid": "3e561932-2246-464e-843f-7eca4bcf3ebc",
              "parentUUID": "f8b52e9b-8be7-4c98-ba7b-3a48dc8fec3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place an order for a pet (POST /store/order)",
              "fullTitle": "Store API Tests should place an order for a pet (POST /store/order)",
              "timedOut": false,
              "duration": 1043,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const order = {\n  id: 10000,\n  petId: 10001, // Assuming this pet exists or was created in pet tests\n  quantity: 1,\n  shipDate: new Date().toISOString(),\n  status: 'placed',\n  complete: true\n};\nconst res = await chai.request(BASE_URL)\n  .post('/store/order')\n  .send(order);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('id').that.is.a('number');\nexpect(res.body).to.have.property('petId', order.petId);\nexpect(res.body).to.have.property('status', 'placed');\norderId = res.body.id;",
              "err": {},
              "uuid": "801846f7-1293-4773-832e-c8966f74c7d4",
              "parentUUID": "f8b52e9b-8be7-4c98-ba7b-3a48dc8fec3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find purchase order by ID (GET /store/order/{orderId})",
              "fullTitle": "Store API Tests should find purchase order by ID (GET /store/order/{orderId})",
              "timedOut": false,
              "duration": 991,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!orderId) {\n  console.warn('Skipping find order by ID test as no order was placed.');\n  return;\n}\nconst res = await chai.request(BASE_URL)\n  .get(`/store/order/${orderId}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('id', orderId);\nexpect(res.body).to.have.property('status', 'placed');",
              "err": {},
              "uuid": "eead5426-5961-4bcd-a39c-e253257c6770",
              "parentUUID": "f8b52e9b-8be7-4c98-ba7b-3a48dc8fec3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete purchase order by ID (DELETE /store/order/{orderId})",
              "fullTitle": "Store API Tests should delete purchase order by ID (DELETE /store/order/{orderId})",
              "timedOut": false,
              "duration": 1970,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!orderId) {\n  console.warn('Skipping delete order test as no order was placed.');\n  return;\n}\nconst res = await chai.request(BASE_URL)\n  .delete(`/store/order/${orderId}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property('message', `${orderId}`);\n// Verify the order is no longer found\nconst getRes = await chai.request(BASE_URL)\n  .get(`/store/order/${orderId}`)\n  .catch(err => err.response);\nexpect(getRes).to.have.status(404);",
              "err": {},
              "uuid": "99b088ed-3084-46d5-b71c-e38bf3a25223",
              "parentUUID": "f8b52e9b-8be7-4c98-ba7b-3a48dc8fec3d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3e561932-2246-464e-843f-7eca4bcf3ebc",
            "801846f7-1293-4773-832e-c8966f74c7d4",
            "eead5426-5961-4bcd-a39c-e253257c6770",
            "99b088ed-3084-46d5-b71c-e38bf3a25223"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5358,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "5a0566e7-fc35-4200-bc82-44464c8a576a",
          "title": "User API Tests",
          "fullFile": "/Users/iskandars/Downloads/2025_indico/petstore-api-tests/test/user.test.js",
          "file": "/test/user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user (POST /user)",
              "fullTitle": "User API Tests should create a new user (POST /user)",
              "timedOut": false,
              "duration": 944,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await chai.request(BASE_URL)\n  .post('/user')\n  .send(testUser);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('code', 200);\nexpect(res.body).to.have.property('message', `${testUser.id}`);",
              "err": {},
              "uuid": "992e9af9-cb7b-45ca-8ed3-36ac6eeda039",
              "parentUUID": "5a0566e7-fc35-4200-bc82-44464c8a576a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should log user into the system (GET /user/login)",
              "fullTitle": "User API Tests should log user into the system (GET /user/login)",
              "timedOut": false,
              "duration": 1061,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await chai.request(BASE_URL)\n  .get(`/user/login?username=${testUser.username}&password=${testUser.password}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('code', 200);\nexpect(res.body).to.have.property('message').that.includes('logged in user session:');",
              "err": {},
              "uuid": "0d378b6c-2469-46fb-8208-e4e4c303a1dd",
              "parentUUID": "5a0566e7-fc35-4200-bc82-44464c8a576a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get user by user name (GET /user/{username})",
              "fullTitle": "User API Tests should get user by user name (GET /user/{username})",
              "timedOut": false,
              "duration": 976,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await chai.request(BASE_URL)\n  .get(`/user/${testUser.username}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('username', testUser.username);\nexpect(res.body).to.have.property('email', testUser.email);",
              "err": {
                "message": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 200 but got 404",
                "estack": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 200 but got 404\n    at Context.<anonymous> (test/user.test.js:46:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- 404\n+ 200\n"
              },
              "uuid": "ce44b63b-e244-407a-bf94-7f9a230a1087",
              "parentUUID": "5a0566e7-fc35-4200-bc82-44464c8a576a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update an existing user (PUT /user/{username})",
              "fullTitle": "User API Tests should update an existing user (PUT /user/{username})",
              "timedOut": false,
              "duration": 2398,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n  id: testUser.id,\n  username: testUser.username,\n  firstName: 'UpdatedTest',\n  lastName: 'UpdatedUser',\n  email: 'updated@example.com',\n  password: 'newpassword123',\n  phone: '987-654-3210',\n  userStatus: 2\n};\nconst res = await chai.request(BASE_URL)\n  .put(`/user/${testUser.username}`)\n  .send(updatedUser);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('code', 200);\nexpect(res.body).to.have.property('message', `${updatedUser.id}`);\n// Verify the update\nconst getRes = await chai.request(BASE_URL)\n  .get(`/user/${testUser.username}`);\nexpect(getRes).to.have.status(200);\nexpect(getRes.body).to.have.property('email', updatedUser.email);\nexpect(getRes.body).to.have.property('phone', updatedUser.phone);",
              "err": {
                "message": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 200 but got 404",
                "estack": "AssertionError: expected Response{ _events: {}, …(34), …(2) } to have status code 200 but got 404\n    at Context.<anonymous> (test/user.test.js:77:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- 404\n+ 200\n"
              },
              "uuid": "96d7122d-4046-4f74-b910-d57e350b7b13",
              "parentUUID": "5a0566e7-fc35-4200-bc82-44464c8a576a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should log user out of the system (GET /user/logout)",
              "fullTitle": "User API Tests should log user out of the system (GET /user/logout)",
              "timedOut": false,
              "duration": 1123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await chai.request(BASE_URL)\n  .get('/user/logout');\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('code', 200);\nexpect(res.body).to.have.property('message', 'ok');",
              "err": {},
              "uuid": "723362a4-3f21-4053-ae62-d7bd068cb731",
              "parentUUID": "5a0566e7-fc35-4200-bc82-44464c8a576a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user (DELETE /user/{username})",
              "fullTitle": "User API Tests should delete a user (DELETE /user/{username})",
              "timedOut": false,
              "duration": 2242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await chai.request(BASE_URL)\n  .delete(`/user/${testUser.username}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('code', 200);\nexpect(res.body).to.have.property('message', testUser.username);\n// Verify the user is no longer found\nconst getRes = await chai.request(BASE_URL)\n  .get(`/user/${testUser.username}`)\n  .catch(err => err.response);\nexpect(getRes).to.have.status(404); // Expecting 404 Not Found",
              "err": {},
              "uuid": "c148ea4a-2e07-4f56-894d-7a6f169f7ce8",
              "parentUUID": "5a0566e7-fc35-4200-bc82-44464c8a576a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create users with given input array (POST /user/createWithArray)",
              "fullTitle": "User API Tests should create users with given input array (POST /user/createWithArray)",
              "timedOut": false,
              "duration": 949,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usersArray = [{\n  id: 101,\n  username: 'user1',\n  firstName: 'First',\n  lastName: 'User',\n  email: 'user1@example.com',\n  password: 'password1',\n  phone: '111-222-3333',\n  userStatus: 1\n}, {\n  id: 102,\n  username: 'user2',\n  firstName: 'Second',\n  lastName: 'User',\n  email: 'user2@example.com',\n  password: 'password2',\n  phone: '444-555-6666',\n  userStatus: 1\n}];\nconst res = await chai.request(BASE_URL)\n  .post('/user/createWithArray')\n  .send(usersArray);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('object');\nexpect(res.body).to.have.property('code', 200);\nexpect(res.body).to.have.property('message', 'ok'); // The API often returns 'ok' for these",
              "err": {},
              "uuid": "9c5e9de5-c8b4-4633-95db-ac34c65cf91d",
              "parentUUID": "5a0566e7-fc35-4200-bc82-44464c8a576a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "992e9af9-cb7b-45ca-8ed3-36ac6eeda039",
            "0d378b6c-2469-46fb-8208-e4e4c303a1dd",
            "723362a4-3f21-4053-ae62-d7bd068cb731",
            "c148ea4a-2e07-4f56-894d-7a6f169f7ce8",
            "9c5e9de5-c8b4-4633-95db-ac34c65cf91d"
          ],
          "failures": [
            "ce44b63b-e244-407a-bf94-7f9a230a1087",
            "96d7122d-4046-4f74-b910-d57e350b7b13"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9693,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 50000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "petstore-api-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "reportFilename": "petstore-api-report",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}